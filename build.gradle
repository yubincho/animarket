plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.7'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// jpa
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	//Querydsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// security
//	implementation 'org.springframework.boot:spring-boot-starter-security'
	// oauth2
//	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	//Jwt
//	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
//	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
//	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// spring-boot-starter-web
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// thymeleaf
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

	// mysql
	implementation 'mysql:mysql-connector-java:8.0.33'
	runtimeOnly 'com.mysql:mysql-connector-j'

	// validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.assertj:assertj-core:3.23.1'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
}

tasks.named('test') {
	useJUnitPlatform()
}

// Querydsl 설정부
def querydslDir = 'src/main/generated/querydsl'

tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

tasks.named('clean') {
	doLast {
		file(querydslDir).deleteDir()
	}
}

sourceSets {
	main {
		java {
			srcDirs += [querydslDir]
		}
	}
}